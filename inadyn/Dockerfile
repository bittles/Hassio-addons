#============================#
#  ALEXBELGIUM'S DOCKERFILE  #
#============================#
#           _.------.
#       _.-`    ('>.-`"""-.
# '.--'`       _'`   _ .--.)
#    -'         '-.-';`   `
#    ' -      _.'  ``'--.
#        '---`    .-'""`
#               /`
#=== Home Assistant Addon ===#

#################
# 1 Build Image #
#################

# FROM troglobit/inadyn:latest
ARG BUILD_FROM
# build from source in folder with hass addon base
#FROM $BUILD_FROM as builder
FROM $BUILD_FROM

RUN apk --no-cache add --virtual .build-dependencies \
  autoconf \
  automake \
  confuse-dev \
  gcc \
  gnutls-dev \
  libc-dev \
  libtool \
  make

WORKDIR /root/source
COPY inadynsource/ ./
RUN ./autogen.sh 
RUN ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/usr
RUN make install

WORKDIR /root
RUN apk del --no-cache --purge .build-dependencies &&\
    rm -rf /root/source

#FROM $BUILD_FROM as base
#FROM builder as base
#COPY --from=builder /usr/sbin/inadyn /usr/sbin/inadyn
#COPY --from=builder /usr/share/doc/inadyn /usr/share/doc/inadyn

#FROM base
RUN apk --no-cache add \
  ca-certificates \
  confuse \
  gnutls

#FROM base
##################
# 2 Modify Image #
##################

# Set S6 wait time
ENV S6_CMD_WAIT_FOR_SERVICES=1 \
    S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0 \
    S6_SERVICES_GRACETIME=0

ARG BUILD_ARCH
ENV LANG='C.UTF-8'\
    TERM='xterm-256color'\
    GOPATH='/opt/go'

##################
# 3 Install apps #
##################

# Add rootfs
COPY rootfs/ /

# Corrects permissions for s6 v3
RUN if [ -d /etc/cont-init.d ]; then chmod -R 755 /etc/cont-init.d; fi && \
    if [ -d /etc/services.d ]; then chmod -R 755 /etc/services.d; fi && \
    if [ -f /entrypoint.sh ]; then chmod 755 /entrypoint.sh; fi

# Modules
ARG MODULES="00-banner.sh 01-custom_script.sh"

# Automatic modules download
#RUN if ! command -v bash >/dev/null 2>/dev/null; then (apt-get update && apt-get install -yqq --no-install-recommends bash || apk add --no-cache bash) >/dev/null; fi \
#    && if ! command -v curl >/dev/null 2>/dev/null; then (apt-get update && apt-get install -yqq --no-install-recommends curl || apk add --no-cache curl) >/dev/null; fi \
#    && apt-get update && apt-get install -yqq --no-install-recommends ca-certificates || apk add --no-cache ca-certificates >/dev/null || true \
RUN mkdir -p /etc/cont-init.d \
    && for scripts in $MODULES; do echo "$scripts" && curl -f -L -s -S "https://raw.githubusercontent.com/alexbelgium/hassio-addons/master/.templates/$scripts" -o /etc/cont-init.d/"$scripts" && [ "$(sed -n '/\/bin/p;q' /etc/cont-init.d/"$scripts")" != "" ] || (echo "script failed to install $scripts" && exit 1); done \
    && chmod -R 755 /etc/cont-init.d

# Manual apps
#ENV PACKAGES="curl \
#    jq \
#    bash \
#    build-base libressl-dev ca-certificates npm"

# Automatic apps & bashio
# hadolint ignore=SC2015
#RUN if ! command -v bash >/dev/null 2>/dev/null; then (apt-get update && apt-get install -yqq --no-install-recommends bash || apk add --no-cache bash) >/dev/null; fi \
#    && if ! command -v curl >/dev/null 2>/dev/null; then (apt-get update && apt-get install -yqq --no-install-recommends curl || apk add --no-cache curl) >/dev/null; fi \
#    && curl -f -L -s -S "https://raw.githubusercontent.com/alexbelgium/hassio-addons/master/.templates/automatic_packages.sh" --output /automatic_packages.sh \
#    && chmod 777 /automatic_packages.sh \
#    && eval /./automatic_packages.sh "${PACKAGES:-}" \
#    && rm /automatic_packages.sh

# Install mustache
# spellcheck disable=SC2015
# hadolint ignore=SC2015,DL3017
#RUN apk add --no-cache \
#    go \
#    npm \
#    xz \
    #    && npm install mustache-cli --global
#    && apk upgrade --no-cache &&\
RUN apk add --no-cache --virtual .build-deps\
    build-base\
    git\
    go &&\
    go env -w GO111MODULE=off &&\
    go get -u github.com/quantumew/mustache-cli &&\
    cp "$GOPATH"/bin/* /usr/bin/ && \
    rm -rf "$GOPATH" /var/cache/apk/* /tmp/src &&\
    apk del --no-cache --purge .build-deps xz build-base go git || true

WORKDIR /
RUN mkdir /share/inadyn-cache
RUN ln -s /share/inadyn-cache /root/.cache/inadyn
RUN rm -rf /root/go-build /media/* /usr/share/doc /usr/share/man /usr/share/misc

################
# 4 Entrypoint #
################

WORKDIR /
RUN chmod 777 /entrypoint.sh
ENTRYPOINT [ "/usr/bin/env" ]
CMD [ "/entrypoint.sh" ]
VOLUME [ "/data" ]

############
# 5 Labels #
############

ARG BUILD_ARCH
ARG BUILD_DATE
ARG BUILD_DESCRIPTION
ARG BUILD_NAME
ARG BUILD_REF
ARG BUILD_REPOSITORY
ARG BUILD_VERSION
LABEL \
    io.hass.name="${BUILD_NAME}" \
    io.hass.description="${BUILD_DESCRIPTION}" \
    io.hass.arch="${BUILD_ARCH}" \
    io.hass.type="addon" \
    io.hass.version=${BUILD_VERSION} \
    maintainer="bittles (https://github.com/bittles)" \
    org.opencontainers.image.title="${BUILD_NAME}" \
    org.opencontainers.image.description="${BUILD_DESCRIPTION}" \
    org.opencontainers.image.vendor="Home Assistant Add-ons" \
    org.opencontainers.image.authors="bittles (https://github.com/bittles)" \
    org.opencontainers.image.licenses="MIT" \
    org.opencontainers.image.url="https://github.com/bittles" \
    org.opencontainers.image.source="https://github.com/${BUILD_REPOSITORY}" \
    org.opencontainers.image.documentation="https://github.com/${BUILD_REPOSITORY}/blob/main/README.md" \
    org.opencontainers.image.created=${BUILD_DATE} \
    org.opencontainers.image.revision=${BUILD_REF} \
    org.opencontainers.image.version=${BUILD_VERSION}
